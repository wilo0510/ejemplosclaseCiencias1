#include<iostream>
using namespace std;
struct Nodo{
	int elemento;
	Nodo *izq;
	Nodo *der;
};
class ArbolBinario{
	protected:
		Nodo *raiz;
	public:
		ArbolBinario();
		Nodo *getRaiz();
		void setRaiz(Nodo *);
		Nodo *agregar(Nodo *,int);
		int eliminar(Nodo*);
		int profundidad(Nodo *);
		Nodo *buscar(Nodo*,int);
		int contar(Nodo*);
		int contarHojas(Nodo *);
		void mostrarPreorden(Nodo *);
		void mostrarPosorden(Nodo *);
		void mostrarInorden(Nodo *);
		void mostrarNiveles(Nodo *);
};
class ArbolBinarioOrdenado: public ArbolBinario{
		public:
			ArbolBinarioOrdenado();
			Nodo *agregar(int);
			Nodo *buscar(int);
			eliminarElemento(int)
};
ArbolBinarioOrdenado::ArbolBinario(){
	raiz=NULL;
}
ArbolBinarioOrdenado::agregar(int elemento){
	Nodo *R=raiz,*s;//variable para recorrer el arbol
	while(R){
		s=R;
		if(elemento<R->elemento)
			R=R->izq;
		else
			R=R->der;
	}
	R=new Nodo;	
	R->elemento=elemento;
	R->der=R->izq=NULL;
	if(raiz){
		if(elemento<s->elemento)
			s->izq=R;
		else
			s->der=R;
	return raiz;
	}
	
}
ArbolBinario::ArbolBinario(){
	raiz=NULL;
}
Nodo *ArbolBinario::getRaiz(){
	return raiz;
}
void ArbolBinario::setRaiz(Nodo *raiz){
	this->raiz=raiz;
}
Nodo *ArbolBinario::agregar(Nodo *raiz,int elemento){
	Nodo *p;
	if(raiz){
		if(profundidad(raiz->izq)<profundidad(raiz->der)){
			raiz->izq=agregar(raiz->izq,elemento);
		}
		else{
			raiz->der=agregar(raiz->der,elemento);
		}
	}
	else
	{
		p=new Nodo;
		raiz=p;
		raiz->elemento=elemento;
		raiz->der=NULL;
		raiz->izq=NULL;
	}
	return raiz;
	
}
ArbolBinario::eliminar(Nodo *raiz){
	Nodo *p=raiz;
	Nodo *q;
	int eliminado=p->elemento;
	if(raiz){
		if(profundidad(raiz->izq)>profundidad(raiz->der)){
			eliminado=eliminar(raiz->izq);
			q=raiz->izq;
		}
		else{
			q=raiz->der;
			eliminado=eliminar(raiz->der);
		}
	}
	else{
	eliminado=q->elemento;	
			
	}
	return eliminado;
		
}
ArbolBinario::profundidad(Nodo *raiz){
	int profIzq,profDer;
	if(raiz){
		profIzq=profundidad(raiz->izq);
		profDer=profundidad(raiz->der);
		if(profIzq>profDer)
			return profIzq+1;
		return profDer+1;
	}
	return 0;
}
void ArbolBinario::mostrarPreorden(Nodo *raiz){
	if(raiz){
		cout<<raiz->elemento<<" ";
		mostrarPreorden(raiz->izq);
		mostrarPreorden(raiz->der);
	}	
}
void ArbolBinario::mostrarPosorden(Nodo *raiz){
	if(raiz){
		
		mostrarPosorden(raiz->izq);
		mostrarPosorden(raiz->der);
		cout<<raiz->elemento<<" ";
	}	
}
void ArbolBinario::mostrarInorden(Nodo *raiz){
	if(raiz){
		
		mostrarInorden(raiz->izq);
		cout<<raiz->elemento<<" ";
		mostrarInorden(raiz->der);
	}	
}
char menu(){
	char opcion;
	cout<<"\n MENU \n";
	cout<<"(A)gregar \n";
	cout<<"(E)liminar \n";
	cout<<"(M)ostrar \n";
	cout<<"(B)uscar \n";
	cout<<"(C)ontar Nodos \n";
	cout<<"Contar (H)ojas  \n";
	cout<<"(T)erminar \n";
	cout<<"Escoja una opcion: ";
	cin>>opcion;
	return opcion;			
}	


int main(){
	ArbolBinario arbol;
	Nodo *raiz=arbol.getRaiz();
	char opcion;
	int elemento;
	do{
		opcion=menu();
		switch(opcion){
			case 'a':
			case 'A':
				cout<<"Por favor ingrese el valor a aÃ±adir al arbol \n";
				cin>>elemento;
				raiz=arbol.agregar(raiz,elemento);
				arbol.setRaiz(raiz);
				break;
			case 'e':
			case 'E':
				cout<<"El elemento eliminado es \n"<<arbol.eliminar(raiz);
				break;
			case 'm':
			case 'M':
				cout<<"Arbol en inorden \n";
				arbol.mostrarInorden(raiz);
				cout<<"\n";
				cout<<"Arbol preorden \n";
				arbol.mostrarPreorden(raiz);
				cout<<"\n";
				cout<<"Arbol posorden \n";
				arbol.mostrarPosorden(raiz);
				cout<<"\n";
				break;
			case 'b':
			case 'B':
				break;
			case 'c':
			case 'C':
				break;
			case 'h':
			case 'H':
				break;
			case 't':
			case 'T':
				break;
				
		}
	}while (opcion!='t' && opcion!='T');
	/*
	ArbolBinario arbol;
	Nodo *raiz=arbol.getRaiz();
	raiz=arbol.agregar(raiz,30);
	arbol.setRaiz(raiz);
	raiz=arbol.agregar(raiz,70);
	arbol.setRaiz(raiz);
	raiz=arbol.agregar(raiz,10);
	arbol.setRaiz(raiz);
	raiz=arbol.agregar(raiz,80);
	arbol.setRaiz(raiz);
	cout<<"elementos del arbol \n";
	arbol.mostrarPreorden(raiz);
	*/
	
}
